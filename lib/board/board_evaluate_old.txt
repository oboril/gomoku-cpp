#include "board.hpp"

inline int64_t eval_counts(BoardRow c1, BoardRow c2, const EvaluationTable * eval_table) {
    if (c2 == 0) {
        return (*eval_table)[c1];
    }
    else if (c1 == 0) {
        return (*eval_table)[c2 + 6];
    }
    else {
        return 0;
    }
}

// Returns evaluation of the current position
int64_t Board::evaluate(const EvaluationTable * eval_table) const {
    int64_t eval = 0;
    const BoardRow* p1 = m_board[m_player];
    const BoardRow* p2 = m_board[!m_player];

    // ROWS
    for (int y = 0; y < BOARD_SIZE; y++) {
        for (int x = 0; x < BOARD_SIZE - 4; x++) {
            BoardRow c1 =
                ((p1[y] >> (x + 0)) & 1) + 
                ((p1[y] >> (x + 1)) & 1) + 
                ((p1[y] >> (x + 2)) & 1) + 
                ((p1[y] >> (x + 3)) & 1) + 
                ((p1[y] >> (x + 4)) & 1);
            BoardRow c2 =
                ((p2[y] >> (x + 0)) & 1) + 
                ((p2[y] >> (x + 1)) & 1) + 
                ((p2[y] >> (x + 2)) & 1) + 
                ((p2[y] >> (x + 3)) & 1) + 
                ((p2[y] >> (x + 4)) & 1);
            eval += eval_counts(c1, c2, eval_table);
        }
    }

    // COLUMNS
    for (int x = 0; x < BOARD_SIZE; x++) {
        for (int y = 0; y < BOARD_SIZE - 4; y++) {
            BoardRow c1 =
                ((p1[y + 0] >> x) & 1) + 
                ((p1[y + 1] >> x) & 1) + 
                ((p1[y + 2] >> x) & 1) + 
                ((p1[y + 3] >> x) & 1) + 
                ((p1[y + 4] >> x) & 1);
            BoardRow c2 =
                ((p2[y + 0] >> x) & 1) + 
                ((p2[y + 1] >> x) & 1) + 
                ((p2[y + 2] >> x) & 1) + 
                ((p2[y + 3] >> x) & 1) + 
                ((p2[y + 4] >> x) & 1);
            eval += eval_counts(c1, c2, eval_table);
        }
    }

    // DIAGONALS
    for (int x = 0; x < BOARD_SIZE - 4; x++) {
        for (int y = 0; y < BOARD_SIZE - 4; y++) {
            // MAIN DIAGONAL
            BoardRow c1 =
                ((p1[y + 0] >> (x + 0)) & 1) + 
                ((p1[y + 1] >> (x + 1)) & 1) + 
                ((p1[y + 2] >> (x + 2)) & 1) + 
                ((p1[y + 3] >> (x + 3)) & 1) + 
                ((p1[y + 4] >> (x + 4)) & 1);
            BoardRow c2 =
                ((p2[y + 0] >> (x + 0)) & 1) + 
                ((p2[y + 1] >> (x + 1)) & 1) + 
                ((p2[y + 2] >> (x + 2)) & 1) + 
                ((p2[y + 3] >> (x + 3)) & 1) + 
                ((p2[y + 4] >> (x + 4)) & 1);
            eval += eval_counts(c1, c2, eval_table);

            // OTHER DIAGONAL
            c1 =
                ((p1[y + 0] >> (x + 4)) & 1) + 
                ((p1[y + 1] >> (x + 3)) & 1) + 
                ((p1[y + 2] >> (x + 2)) & 1) + 
                ((p1[y + 3] >> (x + 1)) & 1) + 
                ((p1[y + 4] >> (x + 0)) & 1);
            c2 =
                ((p2[y + 0] >> (x + 4)) & 1) + 
                ((p2[y + 1] >> (x + 3)) & 1) + 
                ((p2[y + 2] >> (x + 2)) & 1) + 
                ((p2[y + 3] >> (x + 1)) & 1) + 
                ((p2[y + 4] >> (x + 0)) & 1);
            eval += eval_counts(c1, c2, eval_table);
        }
    }

    eval += (*eval_table)[6]; // BIAS

    return eval;
}